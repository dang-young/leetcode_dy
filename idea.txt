# solving idea

sorting ->adjacent element 비교 -> 같으면 return true(중복 존재)

* dynamic programming_재귀와 반복문
- dynamic programming 문제는 재귀의 개념을 떠올릴것
- 재귀는 시간 소요 -> 반복문으로 고쳐야하는 경우 발생 가능
(예) 피보나치 수열: https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=yyj9301&logNo=221223995090


# data structure

* set vs map
- set: set of data
- map: set of key, value

* map/set vs unordered map/set
- unordered: 원소정렬X/hash 이용 -> fast
- 단, 원소의 개수가 많아 해시충돌이 많이 발생하는 경우 오히려 속도저하 가능성이 있음

# operation

* XOR 연산
- XOR 연산: 두 값의 각 자릿수를 비교하여 값이 같으면 0, 다르면 1


* 시간 축소 전략
- vector size만큼 for문을 돌려야 하는 경우 for문 조건에 size()함수 넣는 대신 앞에서 변수에 할당
